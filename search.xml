<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>自己搭建梯子</title>
      <link href="/2019/05/28/%E8%87%AA%E5%B7%B1%E6%90%AD%E5%BB%BA%E6%A2%AF%E5%AD%90/"/>
      <url>/2019/05/28/%E8%87%AA%E5%B7%B1%E6%90%AD%E5%BB%BA%E6%A2%AF%E5%AD%90/</url>
      
        <content type="html"><![CDATA[<h4 id="1、挑选服务器："><a href="#1、挑选服务器：" class="headerlink" title="1、挑选服务器："></a><strong>1、挑选服务器：</strong></h4><p>​     一般供应商都会提供IP<a href="http://lib.csdn.net/base/softwaretest" target="_blank" rel="noopener">测试</a>延迟，或者看各VPS网站评测介绍，一般来讲亚洲服务器延迟更低，比如香港.新加坡就有很多电信或者网通直连机房，而美国VPS价格更便宜，而且带宽大些。</p><p>​    服务器类型，Xen KVM 性能要好过openvz，不过也要更贵一些，综上所述，建议选直连自己运营商的KVM虚拟技术的亚洲VPS。</p><p>下面我们用日本conoha VPS为例开始操作。</p><p>1.日本conoha支持支付宝支付，每月900日元、中文界面 （50rmb如果几个人合用的话成本还算可以。选择HOSTUS的香港25美元/年电信机房也不错）设置并记root密码点击追加建立服务器，这里我们选择centos 6.6 64位版本</p><p><img src="http://i3.tietuku.com/73939c8862f69acd.png" alt="img">2.回到服务器界面，点开网络配置，记下IP4地址</p><h4 id="2-用XshellPortable连接服务器"><a href="#2-用XshellPortable连接服务器" class="headerlink" title="2.用XshellPortable连接服务器"></a>2.用XshellPortable连接服务器</h4><p>填上IP地址点击确定</p><p>用户名为 root</p><p>密码为开通vps设置的9位密码</p><p>连接成功会显示，root@XXXXXX #<br>然后在设置里把右键改成复制剪贴板中的代码 如图，右键粘贴比较方便</p><h4 id="3-这里我们用秋水兄的SS一键安装脚本"><a href="#3-这里我们用秋水兄的SS一键安装脚本" class="headerlink" title="3.这里我们用秋水兄的SS一键安装脚本"></a>3.这里我们用秋水兄的SS一键安装脚本</h4><p>​    全程仅需3行代码，即使0基础毫无问题，依次输入代码回车即可</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">wget --no-check-certificate https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocks.sh</span><br><span class="line"></span><br><span class="line">chmod +x shadowsocks.sh</span><br><span class="line"></span><br><span class="line">./shadowsocks.sh 2&gt;&amp;1 | tee shadowsocks.log</span><br></pre></td></tr></table></figure><p><img src="http://i3.tietuku.com/ae721437801a8c77.png" alt="img"></p><p>询问密码：输入t66y为端口密码</p><p><img src="http://i3.tietuku.com/0ffcb227120d76cd.png" alt="img"></p><p>默认端口8989.可以指定任意端口 ，回车后耐心等待安装</p><p><img src="http://i3.tietuku.com/5d03e29f5ba8a52b.png" alt="img"></p><p>安装完成后，脚本提示如下：</p><p><img src="http://i3.tietuku.com/ace55c8d0f0405c8.png" alt="img"></p><p>现在我们已经成功搭建了一个单用户版SS代理服务器，用其他帖子的教程连接该服务器即可<br>端口为8989 密码t66y</p><h4 id="4-多用户配置"><a href="#4-多用户配置" class="headerlink" title="4.多用户配置"></a>4.多用户配置</h4><p>删除原配置文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm -f /etc/shadowsocks.json</span><br></pre></td></tr></table></figure><p>编辑配置文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/shadowsocks.json</span><br></pre></td></tr></table></figure><p><img src="http://i3.tietuku.com/0abd0889dc17cb2e.png" alt="img"></p><p>按下I键，进入编辑状态<br>左下角有标示—INSERT—<br>如图复制下面代码至配置文件<br>配置端口 8989到9004，密码t66y0到t66y4等5个账号<br>可照例加入更多用户</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&quot;local_address&quot;:&quot;127.0.0.1&quot;,</span><br><span class="line">&quot;local_port&quot;:1080,</span><br><span class="line">&quot;port_password&quot;:&#123;</span><br><span class="line">&quot;8989&quot;:&quot;t66y0&quot;,</span><br><span class="line">&quot;9001&quot;:&quot;t66y1&quot;,</span><br><span class="line">&quot;9002&quot;:&quot;t66y2&quot;,</span><br><span class="line">&quot;9003&quot;:&quot;t66y3&quot;,</span><br><span class="line">&quot;9004&quot;:&quot;t66y4&quot;</span><br><span class="line">&#125;,</span><br><span class="line">&quot;timeout&quot;:300,</span><br><span class="line">&quot;method&quot;:&quot;aes-256-cfb&quot;,</span><br><span class="line">&quot;fast_open&quot;: false</span><br></pre></td></tr></table></figure><p>按下ESC键退出编辑状态，同时按下SHIFT+Q键进入退出模式<br>如图输入wq回车保存退出</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wd</span><br></pre></td></tr></table></figure><h4 id="5、重启-SS服务"><a href="#5、重启-SS服务" class="headerlink" title="5、重启 SS服务"></a>5、重启 SS服务</h4><p><code>/etc/init.d/shadowsocks restart</code></p><p>至此一个多用户版本的SS服务器已经搭建完成<br>其他命令：<br>启动：/etc/init.d/shadowsocks start<br>停止：/etc/init.d/shadowsocks stop<br>重启：/etc/init.d/shadowsocks restart<br>状态：/etc/init.d/shadowsocks status<br>卸载：./shadowsocks.sh uninstall</p><h4 id="6、Shadowsocks-WIN客户端设置"><a href="#6、Shadowsocks-WIN客户端设置" class="headerlink" title="6、Shadowsocks WIN客户端设置"></a>6、Shadowsocks WIN客户端设置</h4><p>Win客户端下载地址：<a href="http://sourceforge.NET/projects/shadowsocksgui/files/dist/" target="_blank" rel="noopener">http://sourceforge.NET/projects/shadowsocksgui/files/dist/</a></p><p>设置界面如下：</p><p>其中：Server IP为服务器IP，Server Port为远程端口（在服务器端shadowsocks.json中设置），Password为密码，Encryption为加密方式，选择<code>AES-256-CFB</code>，Proxy Port为本地端口（在服务器端shadowsocks.json中设置），Remarks为别名。</p><p>配置好客户端后，我们需要选择合适的浏览器和插件来应用本地代理，下面分别介绍了Chrome和Firefox的设置方法。</p><p><strong>a、Chrome</strong></p><p>Chrome使用本地代理需要用到插件<a href="http://switchysharp.com/install.html" target="_blank" rel="noopener">SwitchySharp</a>，安装好插件后，打开插件的设置界面，填入如下设置</p><p>设置完成后选择插件的代理模式为<code>Shadowsocks</code>(或者你自己命名的情景模式)后即可。</p><p>上面的设置为全局代理，如需实现智能代理需要手动添加规则，还可以订阅GFWlist，地址为：<a href="http://autoproxy-gfwlist.googlecode.com/svn/trunk/gfwlist.txt" target="_blank" rel="noopener">http://autoproxy-gfwlist.googlecode.com/svn/trunk/gfwlist.txt</a> 由于这个地址不通过代理无法访问，所以你可以通过其它途径下载到本地，这方面资料网上比较丰富，再者使用起来不是很方便，在此我就不赘述了。下面介绍另一种规则，<a href="https://github.com/clowwindy/" target="_blank" rel="noopener">gfwlist2pac</a>，这是网友在Gfwlist的基础上，更新了部分网址转化成的PAC规则文件，目前我就采用的是这种方式，体验不错，当然，由于规则文件都具有时效性，也许你看到这篇文章时这个规则或许不是最好用的了，这里只是讲一种思路，你可以自行选择其他规则，甚至是自定义的规则，使用PAC规则设置如下:</p><p>PAC规则地址：<a href="https://raw.githubusercontent.com/clowwindy/gfwlist2pac/master/test/proxy_abp.pac" target="_blank" rel="noopener">https://raw.githubusercontent.com/clowwindy/gfwlist2pac/master/test/proxy_abp.pac</a></p><p>设置完成后选择插件的代理模式为<code>gfwlist2pac</code>(或者你自己命名的情景模式)后即可。</p><p><strong>b、Firefox</strong></p><p>Firefox使用本地代理需要用到插件<a href="http://fxthunder.com/blog/archives/2866/" target="_blank" rel="noopener">Autoproxy</a>，这个插件原作者已经没有更新了，本文使用的是其他作者的继续更新版，修复了无法订阅gfwlist的bug，订阅方法和上述类似，同样由于原地址无法直接访问，所以可以通过其他途径下载到本地然后导入。</p><h4 id="7、Shadowsocks-Android客户端设置"><a href="#7、Shadowsocks-Android客户端设置" class="headerlink" title="7、Shadowsocks  Android客户端设置"></a>7、Shadowsocks  Android客户端设置</h4><p>首先需要下载android客户端，Shadowsocks的中文名称为影梭，可以从googleplay下载，如果你无法使用googleplay,可从下面的地址下载:<a href="https://github.com/shadowsocks/shadowsocks-android/releases" target="_blank" rel="noopener">https://github.com/shadowsocks/shadowsocks-android/releases</a> ，android版的设置和PC端类似</p>]]></content>
      
      
      <categories>
          
          <category> 网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> 梯子 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络模型和tcp/ip协议</title>
      <link href="/2019/05/28/%E7%BD%91%E7%BB%9C%E6%A8%A1%E5%9E%8B%E5%92%8Ctcp-ip%E5%8D%8F%E8%AE%AE/"/>
      <url>/2019/05/28/%E7%BD%91%E7%BB%9C%E6%A8%A1%E5%9E%8B%E5%92%8Ctcp-ip%E5%8D%8F%E8%AE%AE/</url>
      
        <content type="html"><![CDATA[<h4 id="0、网络模型自上而下共分为七层："><a href="#0、网络模型自上而下共分为七层：" class="headerlink" title="0、网络模型自上而下共分为七层："></a>0、网络模型自上而下共分为七层：</h4><p>7 应用层<br>6 表示层<br>5 会话层<br>4 传输层<br>3 网络层<br>2 数据链路层<br>1 物理层</p><p><strong>其中3、2、1层主要面向通过网络的端到端的数据流，7、6、5、4层定义了应用程序的功能。</strong></p><p><strong>（1）应用层</strong>：与其他计算机进行通讯的一个应用，它是对应应用程序的通信服务的。例如，一个没有通信功能的字处理程序就不能执行通信的代码，从事字处理工作的程序员也不关心OSI的第7层。但是，如果添加了一个传输文件的选项，那么字处理器的程序员就需要实现OSI的第7层。示例：telnet，HTTP,FTP,WWW,NFS,SMTP等。</p><p><strong>（2）表示层</strong>：这一层的主要功能是定义数据格式及加密。例如，FTP允许你选择以二进制或ASII格式传输。如果选择二进制，那么发送方和接收方不改变文件的内容。如果选择ASII格式，发送方将把文本从发送方的字符集转换成标准的ASII后发送数据。在接收方将标准的ASII转换成接收方计算机的字符集。示例：加密，ASII等。</p><p><strong>（3）会话层</strong>：他定义了如何开始、控制和结束一个会话，包括对多个双向小时的控制和管理，以便在只完成连续消息的一部分时可以通知应用，从而使表示层看到的数据是连续的，在某些情况下，如果表示层收到了所有的数据，则用数据代表表示层。示例：RPC，SQL等。</p><p><strong>（4）传输层</strong>：这层的功能包括是否选择差错恢复协议还是无差错恢复协议，及在同一主机上对不同应用的数据流的输入进行复用，还包括对收到的顺序不对的数据包的重新排序功能。示例：TCP，UDP，SPX。</p><p><strong>（5）网络层</strong>：这层对端到端的包传输进行定义，他定义了能够标识所有结点的逻辑地址，还定义了路由实现的方式和学习的方式。为了适应最大传输单元长度小于包长度的传输介质，网络层还定义了如何将一个包分解成更小的包的分段方法。示例：IP,IPX等。</p><p><strong>（6）数据链路层</strong>：他定义了在单个链路上如何传输数据。这些协议与被讨论的歌种介质有关。示例：ATM，FDDI等。</p><p><strong>（7）物理层</strong>：OSI的物理层规范是有关传输介质的特性标准，这些规范通常也参考了其他组织制定的标准。连接头、针、针的使用、电流、电流、编码及光调制等都属于各种物理层规范中的内容。物理层常用多个规范完成对所有细节的定义。示例：Rj45，802.3等。</p><p><strong>OSI分层的优点：</strong><br>（1）人们可以很容易的讨论和学习协议的规范细节。<br>（2）层间的标准接口方便了工程模块化。<br>（3）创建了一个更好的互连环境。<br>（4）降低了复杂度，使程序更容易修改，产品开发的速度更快。<br>（5）每层利用紧邻的下层服务，更容易记住个层的功能。</p><p><strong>tcp/ip</strong></p><p>TCP/IP是“transmission Control Protocol/Internet Protocol”的简写，中文译名为传输控制协议/互联网络协议）协议。</p><p>TCP/IP（传输控制协议/网间协议）是一种网络通信协议，它规范了网络上的所有通信设备，尤其是一个主机与另一个主机之间的数据往来格式以及传送方式。TCP/IP是INTERNET的基础协议，也是一种电脑数据打包和寻址的标准方法。在数据传送中，可以形象地理解为有两个信封，TCP和IP就像是信封，要传递的信息被划分成若干段，每一段塞入一个TCP信封，并在该信封面上记录有分段号的信息，再将TCP信封塞入IP大信封，发送上网。在接受端，一个TCP软件包收集信封，抽出数据，按发送前的顺序还原，并加以校验，若发现差错，TCP将会要求重发。因此，TCP/IP在INTERNET中几乎可以无差错地传送数据。对普通用户来说，并不需要了解网络协议的整个结构，仅需了解IP的地址格式，即可与世界各地进行网络通信。<br>​        </p>]]></content>
      
      
      <categories>
          
          <category> 网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络模型 </tag>
            
            <tag> tcp </tag>
            
            <tag> ip </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux安装LAMP</title>
      <link href="/2019/05/27/Linux%E5%AE%89%E8%A3%85LAMP/"/>
      <url>/2019/05/27/Linux%E5%AE%89%E8%A3%85LAMP/</url>
      
        <content type="html"><![CDATA[<h2 id="Linux安装LAMP"><a href="#Linux安装LAMP" class="headerlink" title="Linux安装LAMP"></a>Linux安装LAMP</h2><h4 id="0、使用以下命令安装Apache："><a href="#0、使用以下命令安装Apache：" class="headerlink" title="0、使用以下命令安装Apache："></a><strong>0、使用以下命令安装Apache：</strong></h4><p>yum install httpd</p><p>安装完之后，重新启动Apache：/etc/init.d/httpd restart<br>接着将Apache设置为开机启动：chkconfig httpd on.(这一步使得服务器不需要在每次重启的时候都要手动启动httpd服务)</p><p>要查看httpd服务的启动状态，可以使用命令：chkconfig –list httpd(会显示httpd在各个级别(level)下的启动状态)</p><h4 id="1、使用以下命令安装MySQL："><a href="#1、使用以下命令安装MySQL：" class="headerlink" title="1、使用以下命令安装MySQL："></a>1、使用以下命令安装MySQL：</h4><p>yum install mysql mysql-server<br>同样，如果出现提示已安装的话，就说明系统安装了MySQL了，可以跳过这一步，否则，系统接下来会自动安装MySQL。<br>安装完成了之后，启动MySQL：/etc/init.d/mysql start</p><p>将MySQL设置为开机启动：chkconfig mysqld on<br>最后，拷贝配置文件：cp /usr/share/mysql/my-medium.cnf /etc/my.cnf (在/etc下有个my.cnf文件，直接覆盖就行了)</p><p>1.2、用以下命令给root账户设置密码</p><p>mysql_secure_installation<br>根据提示输入2次密码，就设置成功了。注意，在设置过程中，会提示删除是否anonymous用户，是否拒绝root的远程访问，是否删除测试用的数据库等，这些都需要根据自己的实际情况进行选择。最后出现：Thanks for using MySQL!，设置密码成功了。</p><p>重新启动MySQL：/etc/init.d/mysqld restart</p><ol><li>3、mysql开启远程访问权限</li></ol><p>GRANT ALL PRIVILEGES ON <em>.</em> TO ‘myuser‘@’%’IDENTIFIED BY ‘mypassword’ WITH GRANT OPTION;</p><h4 id="2：安装PHP"><a href="#2：安装PHP" class="headerlink" title="2：安装PHP"></a><strong>2：安装PHP</strong></h4><p>2.1、使用以下命令安装PHP：</p><p>yum install php<br>根据提示往下安装就行了。安装完之后重新启动Apache：/etc/init.d/httpd restart<br>2.2、安装PHP组件，是PHP支持MySQL</p><p>可以使用命令：yum search php来查看PHP的组件，选择需要的模块进行安装：</p><p>yum install php-mysql php-gd libjpeg* php-imap php-ldap php-odbc php-pear php-xml php-xmlrpc php-mbstring php-mcrypt php-bcmath php-mhash libmcrypt</p><p>安装完之后，重启Apache：/etc/init.d/httpd restart</p><p>重启MySQL：/etc/init.d/mysqld restart</p>]]></content>
      
      
      <categories>
          
          <category> 博客搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> apache </tag>
            
            <tag> mysql </tag>
            
            <tag> php </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第一个博客</title>
      <link href="/2019/05/24/%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%8D%9A%E5%AE%A2/"/>
      <url>/2019/05/24/%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<p>emmmmm….</p><p>第一个GitHub博客</p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
